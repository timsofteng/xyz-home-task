//go:build go1.22

// Package oapiCodegen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package httpServer

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

// BookBase defines model for BookBase.
type BookBase struct {
	// Currency Currency of price
	Currency string `json:"currency"`

	// Description Description of the book
	Description string `json:"description"`

	// Id Unique ID
	Id string `json:"id"`

	// Pages Pages in the book
	Pages int `json:"pages"`

	// Price Price of the book
	Price float32 `json:"price"`

	// Revision Revision
	Revision *int `json:"revision,omitempty"`

	// Thumbnail Thumbnail URL
	Thumbnail string `json:"thumbnail"`

	// Title Title of the book
	Title string `json:"title"`
}

// BooksListResponse defines model for BooksListResponse.
type BooksListResponse struct {
	Items []BookBase `json:"items"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	// Message Description of the error
	Message string `json:"message"`
}

// GetBooksParams defines parameters for GetBooks.
type GetBooksParams struct {
	// Q Filter query
	Q string `form:"q" json:"q"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all books
	// (GET /books)
	GetBooks(w http.ResponseWriter, r *http.Request, params GetBooksParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetBooks operation middleware
func (siw *ServerInterfaceWrapper) GetBooks(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBooksParams

	// ------------- Required query parameter "q" -------------

	if paramValue := r.URL.Query().Get("q"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "q"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "q", r.URL.Query(), &params.Q)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "q", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetBooks(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       *http.ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m *http.ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m *http.ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/books", wrapper.GetBooks)

	return m
}

type GetBooksRequestObject struct {
	Params GetBooksParams
}

type GetBooksResponseObject interface {
	VisitGetBooksResponse(w http.ResponseWriter) error
}

type GetBooks200JSONResponse BooksListResponse

func (response GetBooks200JSONResponse) VisitGetBooksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetBooks408JSONResponse ErrorResponse

func (response GetBooks408JSONResponse) VisitGetBooksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(408)

	return json.NewEncoder(w).Encode(response)
}

type GetBooks500JSONResponse ErrorResponse

func (response GetBooks500JSONResponse) VisitGetBooksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get all books
	// (GET /books)
	GetBooks(ctx context.Context, request GetBooksRequestObject) (GetBooksResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// GetBooks operation middleware
func (sh *strictHandler) GetBooks(w http.ResponseWriter, r *http.Request, params GetBooksParams) {
	var request GetBooksRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetBooks(ctx, request.(GetBooksRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetBooks")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetBooksResponseObject); ok {
		if err := validResponse.VisitGetBooksResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/6xUTU/bQBD9K6tpj1EckiBVvpVCq0gcEA3tAXHY2BN7ifcjs+O0EeK/V7uOHUyM6IEL",
	"rGc3b96+92afILPaWYOGPaRP4LMStYzLC2s3F9JjWDuyDokVxp2sJkKT7cM6R5+RcqysgRS+HXaEXQtH",
	"KkMYAf6V2iGkcPfzEkbA+/jhmZQp4HnUR3gNeHn8CphcolhZu2lhqwB1UclSrLo/0uTCW2HNUDOVn/a4",
	"M2pbo1hc9lDzBf5ZV5vH30MwThaNFH2km1AWygzynM7POyRlGAukCBVlOoUK5beuPJuMYG1JS4YU1pWV",
	"fCRpar1qkAl3yg+qetvuHN2ZD3HjstYrI1V1CrFst8Td7fVLl0tm59Mk8VbjuAMYZ1YnKp9N59PZfEhR",
	"VlwNyLAM5Ted/6W0WFsSuEPaW4OnwFGGba0Ic0jvg/1tq37wWktbP0bHkL+U4aFrYFePmHFgHubEXyvP",
	"t+idNUMDoxh1f/GZcA0pfEqO45ccZi/pBu+56yaJ5P70NhFtiNMVkaW3+Wj0Xhb4X+OGAaqn+sIwkpGV",
	"8Eg7pOaEsFlULH/Xg7b5Ke9wUpm1HUqb8kJ5IUVus1qjYRk5BvMZPQuWfjPuvE1hGYpfbxYwgh1SMwVw",
	"Np6MJ0Ee69BIpyCFWSwF97mM0iQhZHFVIId/QbfYbJFDCj+Qo9/xJyQ1MpKH9P414e+qYiSxrZFCglSo",
	"tR9G6kBxCy91YapxdHh+Q9vXGj6Ew42fkd10MolPsTWMJhKVzlUqi1STR9+M/RHvvcD1Exyt6N/I11mG",
	"3gf55pMvH9a7n9SBvkul0dYx1ecfeOd3+w6mPIbZ11pL2jdpELKqRJOZCNKcbiJRUwUpJNKpZHcGwUKW",
	"xVBarsL7xaUyhSCsJGMu2B5Qu7wcmjw8/wsAAP//Zwug+7QHAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
